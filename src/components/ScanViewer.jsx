import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { ChevronLeft, ChevronRight, Download, FileText, Clock, CheckCircle, User, Calendar, ZoomIn, ZoomOut, RotateCw } from 'lucide-react';
import { useAuth } from '@/contexts/AuthContext';

const ScanViewer = ({ scan, isOpen, onClose, onStatusUpdate }) => {
  const { user } = useAuth();
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [zoom, setZoom] = useState(100);
  const [rotation, setRotation] = useState(0);
  const [reviewNotes, setReviewNotes] = useState('');

  const currentImage = scan.imageFiles[currentImageIndex];

  const nextImage = () => {
    setCurrentImageIndex((prev) => (prev < scan.imageFiles.length - 1 ? prev + 1 : 0));
    setZoom(100);
    setRotation(0);
  };

  const prevImage = () => {
    setCurrentImageIndex((prev) => (prev > 0 ? prev - 1 : scan.imageFiles.length - 1));
    setZoom(100);
    setRotation(0);
  };

  const handleStatusUpdate = (newStatus) => {
    onStatusUpdate(scan.id, newStatus);
  };

  const generatePDFReport = async () => {
    try {
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();

      // Header
      pdf.setFontSize(20);
      pdf.text('Dental Scan Report', 20, 30);

      // Patient Information
      pdf.setFontSize(14);
      pdf.text('Patient Information:', 20, 50);
      pdf.setFontSize(12);
      pdf.text(`Name: ${scan.patientName}`, 25, 65);
      pdf.text(`Scan Type: ${scan.scanType}`, 25, 75);
      pdf.text(`Upload Date: ${new Date(scan.uploadDate).toLocaleDateString()}`, 25, 85);
      pdf.text(`Uploaded by: ${scan.uploadedBy}`, 25, 95);
      pdf.text(`Status: ${scan.status}`, 25, 105);

      if (scan.notes) {
        pdf.text('Technician Notes:', 20, 125);
        const splitNotes = pdf.splitTextToSize(scan.notes, pageWidth - 40);
        pdf.text(splitNotes, 25, 135);
      }

      if (reviewNotes) {
        pdf.text('Doctor Review Notes:', 20, 165);
        const splitReviewNotes = pdf.splitTextToSize(reviewNotes, pageWidth - 40);
        pdf.text(splitReviewNotes, 25, 175);
      }

      // Add images
      let yPosition = 200;
      for (let i = 0; i < Math.min(scan.imageFiles.length, 3); i++) {
        const image = scan.imageFiles[i];
        if (yPosition > pageHeight - 60) {
          pdf.addPage();
          yPosition = 30;
        }
        try {
          pdf.addImage(image.dataUrl, 'JPEG', 20, yPosition, 80, 60);
          pdf.text(`Image ${i + 1}: ${image.name}`, 110, yPosition + 30);
          yPosition += 80;
        } catch (error) {
          console.error('Error adding image to PDF:', error);
        }
      }

      // Footer
      pdf.setFontSize(10);
      pdf.text(`Generated by: Dr. ${user?.name}`, 20, pageHeight - 20);
      pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, pageHeight - 10);

      pdf.save(`dental-scan-report-${scan.patientName}-${new Date().toISOString().split('T')[0]}.pdf`);
    } catch (error) {
      console.error("Failed to generate PDF report:", error);
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'pending':
        return 'bg-warning text-warning-foreground';
      case 'reviewed':
        return 'bg-accent text-accent-foreground';
      case 'approved':
        return 'bg-success text-success-foreground';
      default:
        return 'bg-muted text-muted-foreground';
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-6xl max-h-[95vh] overflow-hidden">
        <DialogHeader className="border-b border-border pb-4">
          <div className="flex items-center justify-between">
            <div>
              <DialogTitle className="text-2xl text-gradient">
                {scan.patientName} - Scan Review
              </DialogTitle>
              <p className="text-muted-foreground mt-1">
                {scan.scanType} â€¢ Uploaded {new Date(scan.uploadDate).toLocaleDateString()}
              </p>
            </div>
            <Badge className={getStatusColor(scan.status)} variant="secondary">
              {scan.status === 'pending' && <Clock className="w-3 h-3 mr-1" />}
              {scan.status === 'approved' && <CheckCircle className="w-3 h-3 mr-1" />}
              {scan.status.charAt(0).toUpperCase() + scan.status.slice(1)}
            </Badge>
          </div>
        </DialogHeader>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 overflow-y-auto max-h-[calc(95vh-120px)]">
          {/* Image Viewer */}
          <div className="lg:col-span-2 space-y-4">
            <div className="relative bg-black rounded-lg overflow-hidden aspect-video">
              {currentImage && (
                <img
                  src={currentImage.dataUrl}
                  alt={`Scan ${currentImageIndex + 1}`}
                  className="w-full h-full object-contain transition-transform duration-200"
                  style={{
                    transform: `scale(${zoom / 100}) rotate(${rotation}deg)`,
                  }}
                />
              )}

              {scan.imageFiles.length > 1 && (
                <>
                  <button
                    onClick={prevImage}
                    className="absolute left-2 top-1/2 transform -translate-y-1/2 bg-black/50 text-white rounded-full p-2 hover:bg-black/70 transition-colors"
                  >
                    <ChevronLeft className="w-6 h-6" />
                  </button>
                  <button
                    onClick={nextImage}
                    className="absolute right-2 top-1/2 transform -translate-y-1/2 bg-black/50 text-white rounded-full p-2 hover:bg-black/70 transition-colors"
                  >
                    <ChevronRight className="w-6 h-6" />
                  </button>
                </>
              )}
              <div className="absolute bottom-2 left-1/2 transform -translate-x-1/2 bg-black/50 text-white px-3 py-1 rounded-full text-sm">
                {currentImageIndex + 1} of {scan.imageFiles.length}
              </div>
            </div>

            {/* Controls */}
            <div className="flex items-center justify-center space-x-2">
              <Button variant="outline" size="sm" onClick={() => setZoom(Math.max(50, zoom - 25))} disabled={zoom <= 50}>
                <ZoomOut className="w-4 h-4" />
              </Button>
              <span className="text-sm font-medium min-w-[60px] text-center">{zoom}%</span>
              <Button variant="outline" size="sm" onClick={() => setZoom(Math.min(200, zoom + 25))} disabled={zoom >= 200}>
                <ZoomIn className="w-4 h-4" />
              </Button>
              <Button variant="outline" size="sm" onClick={() => setRotation((rotation + 90) % 360)}>
                <RotateCw className="w-4 h-4" />
              </Button>
            </div>

            {/* Thumbnails */}
            {scan.imageFiles.length > 1 && (
              <div className="flex space-x-2 overflow-x-auto pb-2">
                {scan.imageFiles.map((file, index) => (
                  <button
                    key={file.id}
                    onClick={() => {
                      setCurrentImageIndex(index);
                      setZoom(100);
                      setRotation(0);
                    }}
                    className={`flex-shrink-0 w-16 h-16 rounded-lg overflow-hidden border-2 transition-colors ${
                      index === currentImageIndex ? 'border-primary' : 'border-border hover:border-primary/50'
                    }`}
                  >
                    <img src={file.thumbnailUrl} alt={`Thumbnail ${index + 1}`} className="w-full h-full object-cover" />
                  </button>
                ))}
              </div>
            )}
          </div>

          {/* Right Sidebar */}
          <div className="space-y-6">
            {/* Patient Info */}
            <div className="space-y-3">
              <h3 className="text-lg font-semibold flex items-center">
                <User className="w-5 h-5 mr-2" /> Patient Details
              </h3>
              <div className="space-y-2 text-sm">
                <div className="flex items-center">
                  <Calendar className="w-4 h-4 mr-2 text-muted-foreground" />
                  <span>Uploaded: {new Date(scan.uploadDate).toLocaleDateString()}</span>
                </div>
                <div className="flex items-center">
                  <FileText className="w-4 h-4 mr-2 text-muted-foreground" />
                  <span>Type: {scan.scanType}</span>
                </div>
                <div className="flex items-center">
                  <User className="w-4 h-4 mr-2 text-muted-foreground" />
                  <span>By: {scan.uploadedBy}</span>
                </div>
              </div>
            </div>

            {/* Technician Notes */}
            {scan.notes && (
              <div className="space-y-3">
                <h3 className="text-lg font-semibold">Technician Notes</h3>
                <p className="text-sm text-muted-foreground bg-secondary/30 p-3 rounded-lg">{scan.notes}</p>
              </div>
            )}

            {/* Review Notes */}
            <div className="space-y-3">
              <Label htmlFor="reviewNotes" className="text-lg font-semibold">
                Review Notes
              </Label>
              <Textarea
                id="reviewNotes"
                placeholder="Add your review notes here..."
                value={reviewNotes}
                onChange={(e) => setReviewNotes(e.target.value)}
                className="min-h-[100px] transition-medical focus:shadow-medical"
              />
            </div>

            {/* Actions */}
            <div className="space-y-3">
              <h3 className="text-lg font-semibold">Actions</h3>
              <div className="grid grid-cols-2 gap-2">
                {scan.status === 'pending' && (
                  <>
                    <Button variant="outline" size="sm" onClick={() => handleStatusUpdate('reviewed')} className="text-xs">
                      Mark Reviewed
                    </Button>
                    <Button size="sm" onClick={() => handleStatusUpdate('approved')} className="btn-accent text-xs">
                      Approve
                    </Button>
                  </>
                )}
                {scan.status === 'reviewed' && (
                  <Button size="sm" onClick={() => handleStatusUpdate('approved')} className="btn-accent col-span-2">
                    <CheckCircle className="w-4 h-4 mr-2" /> Approve
                  </Button>
                )}
              </div>

              <Button variant="outline" className="w-full" onClick={generatePDFReport}>
                <Download className="w-4 h-4 mr-2" /> Generate PDF Report
              </Button>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default ScanViewer;
